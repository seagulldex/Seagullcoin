openapi: 3.0.0
info:
  title: SGLCN-X20 Minting API
  version: 1.0.0
servers:
  - url: https://sglcn-x20-api.glitch.me
paths:
  /login:
    post:
      summary: Initiate XUMM login session
      responses:
        '200':
          description: Login payload created

  /pay:
    post:
      summary: Initiate payment of 0.5 SeagullCoin
      responses:
        '200':
          description: Payment payload created

  /validate-payment:
    post:
      summary: Validate the payment for NFT minting
      responses:
        '200':
          description: Payment validated

  /mint:
    post:
      summary: Mint a new NFT after payment
      responses:
        '200':
          description: NFT minted successfully

  /burn:
    post:
      summary: Burn (delete) an existing NFT
      responses:
        '200':
          description: NFT burned

  /nfts:
    get:
      summary: List all minted NFTs
      responses:
        '200':
          description: List of NFTs

  /nfts/{id}:
    get:
      summary: Retrieve a specific NFT
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: NFT details

  /nfts/{id}/like:
    post:
      summary: Like an NFT
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like registered

  /nfts/{id}/likes:
    get:
      summary: Get number of likes on an NFT
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like count

  /user/likes:
    get:
      summary: Get NFTs liked by the authenticated user
      responses:
        '200':
          description: Liked NFTs

  /collections:
    get:
      summary: List all NFT collections
      responses:
        '200':
          description: List of collections

    post:
      summary: Create a new NFT collection
      responses:
        '200':
          description: Collection created

  /collections/{collectionId}:
    get:
      summary: Get NFTs in a collection
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection NFTs

  /offers:
    post:
      summary: Create a new offer to buy or sell an NFT
      responses:
        '200':
          description: Offer created

  /offers/{offerId}:
    delete:
      summary: Reject or cancel an offer
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer cancelled

  /accept-offer:
    post:
      summary: Accept an offer
      responses:
        '200':
          description: Offer accepted

  /user:
    get:
      summary: Get user profile details (authenticated)
      responses:
        '200':
          description: User details

  /user/{walletAddress}:
    get:
      summary: Get public user profile
      parameters:
        - name: walletAddress
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public profile

  /user/username:
    post:
      summary: Update username
      responses:
        '200':
          description: Username updated

  /user/avatar:
    post:
      summary: Upload or update profile picture
      responses:
        '200':
          description: Avatar updated

  /messages:
    post:
      summary: Send a message to another wallet
      responses:
        '200':
          description: Message sent

    get:
      summary: Get inbox messages
      responses:
        '200':
          description: Message list
/pay:
  post:
    summary: Verify SeagullCoin payment
    description: Checks that the user has a trustline and has sent at least 0.5 SeagullCoin to the service wallet.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              walletAddress:
                type: string
                example: rExampleWalletAddress123
    responses:
      200:
        description: Payment verified
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                txHash:
                  type: string
      402:
        description: Payment not found
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: "Payment of 0.5 SeagullCoin not found"
      403:
        description: Trustline missing
      500:
        description: Server error

  /messages/{walletAddress}:
    get:
      summary: Get conversation with a specific wallet
      parameters:
        - name: walletAddress
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Conversation thread
